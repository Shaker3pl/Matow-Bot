[null,{"name":"reactionStart","temp":"","event-type":"1","_id":"Lwriz","actions":[{"behavior":"0","interpretation":"1","code":"if (globalVars(\"RoleReactionMenuAlreadyRan\") == null) {\n    const Discord = require(\"discord.js\");\n    const path = require(\"path\");\n    Actions.storeValue(true, 3, \"RoleReactionMenuAlreadyRan\", cache);\n\n    if(globalVars(\"installedStenoRequest\") == null) {\n        Actions.storeValue(true, 3, \"installedStenoRequest\", cache);\n\n        try {\n            require.resolve(\"request\");\n            require.resolve(\"graceful-fs\");\n            require.resolve(\"steno\");\n        } catch(e) {\n            console.log(\"Required NPM modules not found!\\n\\nInstalling modules..\");\n            var child_process = require('child_process');\n            child_process.execSync('npm install steno request graceful-fs',{stdio:\"pipe\"});\n            console.log(\"NPM Module Installation Complete\")\n        }\n        console.log(\"NPM Module Check Complete\\n\")\n    }\n\n    const request = require('request');\n    const fs = require('graceful-fs');\n    const steno = require('steno')\n\n    //Settings\n    const dmUserAfter = true; // Default: true, can be changed to false\n    var messageSentAdd = 'Successfully added the role {rolename} in {server}';\n    var messageSentRemove = 'Successfully removed the role {rolename} in {server}';\n    var debug = false; // Default: false, can be changed to true\n    var checkUpdates = true;\n    // The only variables that work rn, {rolename} and {server}\n\n    var requiredIntents = [\"GUILDS\",\"GUILD_MEMBERS\",\"GUILD_MESSAGE_REACTIONS\",\"GUILD_MESSAGES\"];\n    var intentCheck = new Discord.Intents(DBM.Bot.intents()).toArray();\n    requiredIntents.forEach(intent => {\n        if (!intentCheck.includes(intent)) {\n            console.log(`[Role Reaction] You don't have the ${intent} intent enabled!`)\n        }\n    })\n\n    if (checkUpdates) {\n        request('https://raw.githubusercontent.com/ItzPike/DBM-Rawdata-Releases/master/Role%20Reaction%20Menu/versionCheck.json', function(error, response, body) {\n            if (response.statusCode == 200) {\n                var allVersions = JSON.parse(body);\n\n                var commandVersions = {};\n                var eventVersions = {};\n                var commandKeys = [];\n                var eventKeys = [];\n\n                allVersions[\"commands\"].forEach(commandVer => {\n                    commandVersions[commandVer[0]] = commandVer[1];\n                    commandKeys.push(commandVer[0]);\n                });\n\n                allVersions[\"events\"].forEach(eventVer => {\n                    eventVersions[eventVer[0]] = eventVer[1];\n                    eventKeys.push(eventVer[0])\n                })\n\n                fs.readFile(\"./data/commands.json\", async function(err, data) {\n                    var data = JSON.parse(data);\n\n                    var systemCommands = await data.filter(command => command != null && commandKeys.includes(command[\"_id\"]));\n\n                    for (i = 0; i < systemCommands.length; i++) {\n                        var systemActionFind = await systemCommands[i][\"actions\"].filter(actionInfo => actionInfo.name = \"Run Script\" && actionInfo.code != null);\n\n                        if (systemActionFind.length != 0) {\n                            var versionCheckSplit = systemActionFind[0].code.split(\"VersionCheck:\");\n                            if (versionCheckSplit[1] != null && versionCheckSplit[1] != commandVersions[systemCommands[i][\"_id\"]] && !isNaN(versionCheckSplit[versionCheckSplit.length - 1])) {\n                                console.log(`[Role Reaction] The command ${systemCommands[i][\"name\"]} needs an update!`)\n                            }\n                        }\n                    }\n                })\n\n                fs.readFile(\"./data/events.json\", async function(err, data) {\n                    var data = JSON.parse(data);\n\n                    var systemEvent = await data.filter(event => event != null && eventKeys.includes(event[\"_id\"]));\n\n                    for (i = 0; i < systemEvent.length; i++) {\n                        var systemEventFind = await systemEvent[i][\"actions\"].filter(actionInfo => actionInfo.name = \"Run Script\" && actionInfo.code != null);\n\n                        if (systemEventFind.length != 0) {\n                            var versionCheckSplit = systemEventFind[0].code.split(\"VersionCheck:\");\n                            if (versionCheckSplit != null && versionCheckSplit[versionCheckSplit.length - 1] != eventVersions[systemEvent[i][\"_id\"]] && !isNaN(versionCheckSplit[versionCheckSplit.length - 1])) {\n                                console.log(`[Role Reaction] The event ${systemEvent[i][\"name\"]} needs an update!`)\n                            }\n                        }\n                    }\n                })\n            }\n        });\n    }\n\n    /*\n    if (globalVars(\"reactionRoleMoved\") == null) {\n        Files.saveGlobalVariable(\"reactionRoleMoved\", true);\n\n        var dataPath = path.normalize(\"./data/roleReaciton\")\n\n        if (!fs.existsSync(`./data/roleReaciton`)) {\n            fs.mkdirSync(`./data/roleReaciton`);\n        }\n\n        [\"reactionRoleData\"].forEach(fileName => {\n            if (fs.existsSync(`./data/${fileName}.json`)) {\n                fs.renameSync( `./data/${fileName}.json`, `./data/roleReaciton/${fileName}.json`);\n            }\n        });\n    }\n    */\n\n    var dataFolder = path.normalize(\"./data/roleReaciton\");\n    var dataFile = path.normalize(\"./data/roleReaciton/reactionRoleData.json\");\n\n    if (!fs.existsSync(dataFolder)) {\n        fs.mkdirSync(dataFolder);\n    }\n\n    if (fs.existsSync(dataFile)) {\n        fs.readFile(dataFile, function read(err, data) {\n            if (err) {\n                throw err;\n            }\n            data = JSON.parse(data)\n\n            Actions.storeValue(data, 3, 'reactionRoleInf', cache);\n        });\n    } else {\n        fs.writeFile(dataFile, \"{}\", function(err) {\n            if (err) {\n                return console.log(err);\n            }\n        });\n        Actions.storeValue({}, 3, 'reactionRoleInf', cache);\n    }\n\n    client.on('messageReactionAdd', async function(reaction, user) {\n        user = await user;\n\n        if (user == null) {\n            console.log(\"Role reaction error: User is not defined! Please make sure you have followed the new setup for intents to allow this command to work!\");\n        } else {\n            if (!user.bot && reaction != null) {\n                const reactionData = globalVars(\"reactionRoleInf\");\n                const reactionGuild = reaction.message.guild;\n                const reactionMessage = reaction.message;\n                if (reactionData.hasOwnProperty(reactionMessage.id)) {\n                    var emojiName = reaction.emoji.name;\n                    var roleInData = await reactionData[reactionMessage.id].filter(re => re[0] == emojiName || re[0].name == emojiName)\n                    if (roleInData.length != 0) {\n                        var guilduser = await reactionGuild.members.cache.get(user.id);\n                        var roleData = roleInData[0][1];\n\n                        if (!guilduser.roles.cache.has(roleData)) {\n                            var reactionRole = await reactionGuild.roles.cache.get(roleData);\n\n                            guilduser.roles.add(reactionRole)\n                                .catch(function(error) {\n                                    guilduser.send(\"Sorry! I couldn't add the role due to either permission issues or the role's position may be higher than my highest role's position. Please contact an adminstrator about this issue.\")\n                                        .catch(function(error) {\n                                            if (error != \"DiscordAPIError: Cannot send messages to this user\" && debug) {\n                                                console.log(error);\n                                            } else if (debug) {\n                                                console.log(`Unable to send user a message || ${guilduser.name}`)\n                                            }\n                                        });\n                                    if (debug) {\n                                        console.log(error);\n                                    }\n                                });\n\n\n                            if (dmUserAfter) {\n                                guilduser.send(messageSentAdd.replace(\"{rolename}\", `**${reactionRole.name}**`).replace(\"{server}\", `**${reactionGuild.name}**`))\n                                    .catch(function(error) {\n                                        if (error != \"DiscordAPIError: Cannot send messages to this user\" && debug) {\n                                            console.log(error);\n                                        } else if (debug) {\n                                            console.log(`Unable to send user a message || ${guilduser.name}`)\n                                        }\n                                    });\n                            }\n\n                        }\n                    }\n                }\n            }\n        }\n\n    });\n\n    client.on('messageReactionRemove', async function(reaction, user) {\n        user = await user;\n\n        if (user == null) {\n            console.log(\"Role reaction error: User is not defined! Please make sure you have followed the new setup for intents to allow this command to work!\");\n        } else {\n            if (!user.bot) {\n                const reactionData = globalVars(\"reactionRoleInf\");\n                const reactionGuild = reaction.message.guild\n                const reactionMessage = reaction.message;\n                if (reactionData.hasOwnProperty(reactionMessage.id)) {\n                    var emojiName = reaction.emoji.name;\n                    var roleInData = await reactionData[reactionMessage.id].filter(re => re[0] == emojiName || re[0].name == emojiName)\n                    if (roleInData.length != 0) {\n                        var guilduser = await reactionGuild.members.cache.get(user.id);\n                        var roleData = roleInData[0][1];\n\n                        if (guilduser.roles.cache.has(roleData)) {\n                            var reactionRole;\n                            reactionRole = await reactionGuild.roles.cache.get(roleData);\n\n                            guilduser.roles.remove(reactionRole)\n                                .catch(function(error) {\n                                    guilduser.send(\"Sorry! I couldn't remove the role due to either permission issues or the role's position may be higher than my highest role's position. Please contact an adminstrator about this issue.\")\n                                        .catch(function(error) {\n                                            if (error != \"DiscordAPIError: Cannot send messages to this user\" && debug) {\n                                                console.log(error);\n                                            } else if (debug) {\n                                                console.log(`Unable to send user a message || ${guilduser.name}`)\n                                            }\n                                        });\n                                    if (debug) {\n                                        console.log(error);\n                                    }\n                                });\n\n                            if (dmUserAfter) {\n                                guilduser.send(messageSentRemove.replace(\"{rolename}\", `**${reactionRole.name}**`).replace(\"{server}\", `**${reactionGuild.name}**`))\n                                    .catch(function(error) {\n                                        if (error != \"DiscordAPIError: Cannot send messages to this user\" && debug) {\n                                            console.log(error);\n                                        } else if (debug) {\n                                            console.log(`Unable to send user a message || ${guilduser.name}`)\n                                        }\n                                    });\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    });\n\n    client.on('messageDelete', async function(message) {\n        const reactionData = globalVars(\"reactionRoleInf\");\n\n        if(reactionData.hasOwnProperty(message.id)) {\n            delete reactionData[message.id]\n            Actions.storeValue(reactionData, 3, \"reactionRoleInf\", cache);\n            steno.writeFile(dataFile, JSON.stringify(reactionData), function(err) {\n                if (err) {\n                    return console.log(err);\n                }\n            });\n        }\n    })\n}\n\n// VersionCheck:8","storage":"0","varName":"","name":"Run Script"}]},{"name":"CaptchaStart","temp":"memberJoined","event-type":"1","_id":"tbmZg","actions":[{"behavior":"1","interpretation":"1","code":"if (globalVars(\"captchaStartAlreadyRan\") == null) {\n    const request = require(\"request\");\n    const Discord = require('discord.js');\n    const fs = require('fs');\n    var checkUpdates = true;\n\n    this.storeValue(true, 3, \"captchaStartAlreadyRan\", cache);\n\n    if (!fs.existsSync(\"./captchas\")) {\n        fs.mkdirSync(\"./captchas\");\n    }\n\n    fs.readdir(\"./captchas\", (err, files) => {\n        if (err) throw err;\n\n        for (const file of files) {\n            var fileExt = getExtension(file);\n            if (fileExt == \".png\") {\n                fs.unlink(`./captchas/${file}`, err => {\n                    if (err) throw err;\n                });\n            }\n        }\n    });\n\n    function getExtension(filename) {\n        var i = filename.lastIndexOf('.');\n        return (i < 0) ? '' : filename.substr(i);\n    }\n\n    var requiredIntents = [\"GUILD_MEMBERS\"];\n        var intentCheck = new Discord.Intents(DBM.Bot.intents()).toArray();\n        requiredIntents.forEach(intent => {\n            if (!intentCheck.includes(intent)) {\n                console.log(`[Captcha] You don't have the ${intent} intent enabled!`)\n            }\n        })\n\n\n\n    if (checkUpdates) {\n        request('https://raw.githubusercontent.com/ItzPike/DBM-Rawdata-Releases/master/Captcha/versionCheck.json', function(error, response, body) {\n            if (response.statusCode == 200) {\n                var allVersions = JSON.parse(body);\n\n                var commandVersions = {};\n                var eventVersions = {};\n                var commandKeys = [];\n                var eventKeys = []\n\n                allVersions[\"commands\"].forEach(commandVer => {\n                    commandVersions[commandVer[0]] = commandVer[1];\n                    commandKeys.push(commandVer[0]);\n                });\n\n                allVersions[\"events\"].forEach(eventVer => {\n                    eventVersions[eventVer[0]] = eventVer[1];\n                    eventKeys.push(eventVer[0])\n                })\n\n                fs.readFile(\"./data/commands.json\", async function(err, data) {\n                    var data = JSON.parse(data);\n\n                    var systemCommands = await data.filter(command => command != null && commandKeys.includes(command[\"_id\"]));\n\n                    for (i = 0; i < systemCommands.length; i++) {\n                        var systemActionFind = await systemCommands[i][\"actions\"].filter(actionInfo => actionInfo.name = \"Run Script\" && actionInfo.code != null);\n\n                        if (systemActionFind.length != 0) {\n                            var versionCheckSplit = systemActionFind[0].code.split(\"VersionCheck:\");\n                            if (versionCheckSplit[1] != null && versionCheckSplit[1] != commandVersions[systemCommands[i][\"_id\"]] && !isNaN(versionCheckSplit[versionCheckSplit.length - 1])) {\n                                console.log(`[Capcha] The command ${systemCommands[i][\"name\"]} needs an update!`)\n                            }\n                        }\n                    }\n                })\n\n                fs.readFile(\"./data/events.json\", async function(err, data) {\n                    var data = JSON.parse(data);\n\n                    var systemEvent = await data.filter(event => event != null && eventKeys.includes(event[\"_id\"]));\n\n                    for (i = 0; i < systemEvent.length; i++) {\n                        var systemEventFind = await systemEvent[i][\"actions\"].filter(actionInfo => actionInfo.name = \"Run Script\" && actionInfo.code != null);\n\n                        if (systemEventFind.length != 0) {\n                            var versionCheckSplit = systemEventFind[0].code.split(\"VersionCheck:\");\n                            if (versionCheckSplit != null && versionCheckSplit[versionCheckSplit.length - 1] != eventVersions[systemEvent[i][\"_id\"]] && !isNaN(versionCheckSplit[versionCheckSplit.length - 1])) {\n                                console.log(`[Capcha] The event ${systemEvent[i][\"name\"]} needs an update!`)\n                            }\n                        }\n                    }\n                })\n            }\n        });\n    }\n\n    client.on('guildMemberAdd', (member) => {\n        var memberJoined = member;\n        var serverRoleToGive = memberJoined.guild.data(\"serverCaptchaRole\");\n        var roleToGive = [];\n\n        if (serverRoleToGive != null && serverRoleToGive != 0) {\n            if (!Array.isArray(serverRoleToGive)) {\n                serverRoleToGive = [serverRoleToGive];\n            } else {\n                serverRoleToGive = serverRoleToGive;\n            }\n\n            var rolesInServer = memberJoined.guild.roles.cache.keyArray();\n\n            for (i=0; i<serverRoleToGive.length; i++) {\n                if (rolesInServer.includes(serverRoleToGive[i])) {\n                    roleToGive.push(serverRoleToGive[i]);\n                }\n            }\n\n            if (roleToGive.length > 0 || serverRoleToGive == 1) {\n                getCaptcha(3, \"\");\n            } else {\n                memberJoined.guild.setData(\"serverCaptchaRole\", 0);\n            }\n\n            if (serverRoleToGive != roleToGive) {\n                memberJoined.guild.setData(\"serverCaptchaRole\", roleToGive)\n            }\n        }\n\n        function getCaptcha(attempts, reason) {\n            var embed = {\n                \"title\": \"Automated Captcha System\",\n                \"description\": `Witamy ${memberJoined.guild.name}!\\n\\nTen serwer jest chroniony przez system captcha i musisz rozwiązać poniższy kod captcha.\\n\\n**Captcha uwzględnia wielkość liter i liczb.**\\n\\nJeśli odpowiesz źle, masz w sumie trzy próby, aby spróbować zrobić to dobrze.\\nCaptcha odświeży się po każdej nieudanej próbie.\\n\\nMasz 120 sekund na każdą kod captcha\\n\\n${attempts} Pozostałe próby \\n\\n${reason}`,\n                \"color\": 0x00ff00\n            }\n\n            if (attempts != 0) {\n                request('https://captchaGenerate.itzpike.repl.co', function(error, response, body) {\n                    if (response.statusCode == 200) {\n                        body = JSON.parse(body);\n\n                        var data = body.image.replace(/^data:image\\/\\w+;base64,/, '');\n                        var fileTitle = Math.random().toString(36).substring(6);\n                        fs.writeFile(`./captchas/${fileTitle}.png`, data, {\n                            encoding: 'base64'\n                        }, function(err) {\n                            if (err) {\n                                console.log(err);\n                            }\n\n                            const file = new Discord.MessageAttachment(`./captchas/${fileTitle}.png`);\n                            embed[\"image\"] = {\n                                \"url\": `attachment://${fileTitle}.png`\n                            }\n\n                            memberJoined.send({\n                                files: [file],\n                                embed: embed\n                            }).then(msgSent => {\n                                msgSent.channel.awaitMessages(m => m.author.id == memberJoined.id, {\n                                        max: 1,\n                                        time: 120000,\n                                        errors: ['time']\n                                    })\n                                    .then(collected => {\n                                        fs.unlinkSync(`./captchas/${fileTitle}.png`);\n                                        msgSent.delete();\n                                        if (collected.first().content.replace(/\\s/g, '') == body.key) {\n                                            if (serverRoleToGive != 1) {\n                                                memberJoined.roles.add(roleToGive);\n                                            }\n                                            embed.description = \"Captcha powodzenia!\\n\\nWitamy na serwerze..\";\n                                            delete embed[\"image\"];\n                                            memberJoined.send({\n                                                embed: embed\n                                            });\n                                        } else {\n                                            getCaptcha(attempts - 1, \"Nie podałeś prawidłowego kodu captcha!\");\n                                        }\n                                    })\n                                    .catch(err => {\n                                        fs.unlinkSync(`./captchas/${fileTitle}.png`);\n                                        getCaptcha(attempts - 1, \"Skończył ci się czas!\");\n                                    });\n                            })\n                        });\n                    }\n                })\n            } else {\n                embed.color = 0xff0000;\n                embed.description = \"Weryfikacja Captcha nie powiodła się!\\n\\nSkończyły ci się próby!\\nDołącz ponownie do serwerem, aby ponownie pobrać kod captcha.\";\n                memberJoined.send({\n                    embed: embed\n                }).then(serverMess => {\n                    memberJoined.kick();\n                })\n            }\n        }\n\n\n    })\n}\n\n// VersionCheck:7","storage":"0","varName":"","name":"Run Script"}]},{"name":"join","temp":"user","event-type":"6","_id":"etSnv","actions":[{"server":"0","varName":"","info":"35","storage":"1","varName2":"który","name":"Store Server Info"},{"member":"2","varName":"user","info":"16","storage":"1","varName2":"avatar_url","name":"Store Member Info"},{"title":"","author":"","color":"#00aaff","url":"","authorIcon":"","authorUrl":"","imageUrl":"","thumbUrl":"${tempVars(\"avatar_url\")}","timestamp":"true","debug":"false","text":"","year":"","month":"","day":"","hour":"","minute":"","second":"","storage":"1","varName":"embed","name":"Create Embed Message"},{"storage":"1","varName":"embed","fieldName":"Witaj!","message":"**${tempVars(\"user\")}** Jesteś naszym **${tempVars(\"który\")}** użytkownikiem!","inline":"1","name":"Add Embed Field"},{"storage":"1","varName":"embed","message":"💬","footerIcon":"","name":"Set Embed Footer"},{"storage":"1","varName":"embed","channel":"6","varName2":"powitania-kanal","storage3":"0","varName3":"","iffalse":"0","iffalseVal":"","messageContent":"","name":"Send Embed Message"}]},{"name":"left","temp":"user","event-type":"7","_id":"mrzTf","actions":[{"server":"0","varName":"","info":"35","storage":"1","varName2":"ile","name":"Store Server Info"},{"member":"2","varName":"user","info":"16","storage":"1","varName2":"avatar_url","name":"Store Member Info"},{"title":"","author":"","color":"#ff2a00","url":"","authorIcon":"","authorUrl":"","imageUrl":"","thumbUrl":"${tempVars(\"avatar_url\")}","timestamp":"true","debug":"false","text":"","year":"","month":"","day":"","hour":"","minute":"","second":"","storage":"1","varName":"embed","name":"Create Embed Message"},{"storage":"1","varName":"embed","fieldName":"Żegnamy!","message":"**${tempVars(\"user\")}** Wyszedł z naszego serwera, teraz jest nas **${tempVars(\"ile\")}**","inline":"1","name":"Add Embed Field"},{"storage":"1","varName":"embed","message":"💬","footerIcon":"","name":"Set Embed Footer"},{"storage":"1","varName":"embed","channel":"6","varName2":"zegnamy-kanal","storage3":"0","varName3":"","iffalse":"0","iffalseVal":"","messageContent":"","name":"Send Embed Message"}]},{"name":"ranksystem","temp":"expgain","event-type":"2","_id":"wUTyW","actions":[{"server":"0","varName":"","info":"0","storage":"1","varName2":"id","name":"Store Server Info"},{"storage":"1","varName":"channel","comparison":"0","value":"","iftrue":"2","iftrueVal":"4","iffalse":"0","iffalseVal":"","name":"Check Variable"},{"message":"1","varName":"expgain","info":"3","storage":"1","varName2":"member","name":"Store Message Info"},{"member":"2","varName":"member","dataName":"${tempVars(\"id\")}exp","changeType":"1","value":"1","name":"Control Member Data"},{"member":"2","varName":"member","dataName":"${tempVars(\"id\")}rank","defaultVal":"1","storage":"1","varName2":"userrank","name":"Store Member Data"},{"member":"2","varName":"member","dataName":"${tempVars(\"id\")}exp","comparison":"4","value":"tempVars(\"userrank\")*200","iftrue":"0","iftrueVal":"","iffalse":"1","iffalseVal":"","name":"Check Member Data"},{"member":"2","varName":"member","dataName":"${tempVars(\"id\")}rank","changeType":"1","value":"1","name":"Control Member Data"},{"title":"Gratuluje! Wbiłeś nastepny lvl","author":"","color":"00a044","url":"","authorIcon":"","authorUrl":"","imageUrl":"","thumbUrl":"","timestamp":"true","debug":"false","text":"","year":"","month":"","day":"","hour":"","minute":"","second":"","storage":"1","varName":"message","name":"Create Embed Message"},{"storage":"1","varName":"message","message":"**Hurra ${tempVars(\"member\")} wbił następny lvl ${tempVars(\"userrank\")}**","name":"Set Embed Description"},{"storage":"1","varName":"message","channel":"6","varName2":"poziomy-kanal","storage3":"0","varName3":"","iffalse":"0","iffalseVal":"","messageContent":"","name":"Send Embed Message"}]},{"name":"reakcja - memy","permissions":"NONE","restriction":"1","_id":"GaqJt","actions":[{"server":"0","varName":"","info":"0","storage":"1","varName2":"id","name":"Store Server Info"},{"message":"1","varName":"message","info":"4","storage":"1","varName2":"channel","name":"Store Message Info"},{"channel":"3","varName":"channel","info":"1","storage":"1","varName2":"channelid","name":"Store Channel Info"},{"storage":"2","varName":"memy-kanal","comparison":"1","value":"${serverVars(\"memy-kanal\")}","iftrue":"0","iftrueVal":"","iffalse":"1","iffalseVal":"","name":"Check Variable"},{"server":"0","varName":"","storage":"1","varName2":"bot","name":"Get Bot as Member"},{"storage":"1","varName":"message","emoji":"4","varName2":"👍","varName3":"emoji","name":"Add Reaction"},{"storage":"1","varName":"message","emoji":"4","varName2":"👎","varName3":"emoji","name":"Add Reaction"},{"storage":"1","varName":"message","emoji":"4","varName2":"😂","varName3":"emoji","name":"Add Reaction"}],"comType":"0","event-type":"2","temp":"message"},{"name":"Blokada zaproszeń Discord","permissions":"NONE","restriction":"1","_id":"jOoIS","actions":[{"message":"1","varName":"message","info":"3","storage":"1","varName2":"msg_author","name":"Store Message Info"},{"message":"1","varName":"message","info":"2","storage":"1","varName2":"msg_text","name":"Store Message Info"},{"message":"1","varName":"message","info":"4","storage":"1","varName2":"msg_channel","name":"Store Message Info"},{"member":"2","varName":"msg_author","info":"2","storage":"1","varName2":"nick_reklamujacego","name":"Store Member Info"},{"member":"2","varName":"msg_author","info":"16","storage":"1","varName2":"avatar_reklamujacego","name":"Store Member Info"},{"storage":"1","varName":"msg_text","comparison":"5","value":"discord.gg","iftrue":"3","iftrueVal":"2","iffalse":"0","iffalseVal":"","name":"Check Variable"},{"storage":"1","varName":"msg_text","comparison":"5","value":"discordapp.com/invite","iftrue":"3","iftrueVal":"1","iffalse":"0","iffalseVal":"1","name":"Check Variable"},{"storage":"1","varName":"msg_text","comparison":"5","value":"discordbots.org/servers","iftrue":"0","iftrueVal":"","iffalse":"1","iffalseVal":"","name":"Check Variable"},{"storage":"1","varName":"message","name":"Delete Message"},{"title":"Reklama!","author":"","color":"RED","url":"","authorIcon":"","authorUrl":"","imageUrl":"","thumbUrl":"${tempVars(\"avatar_reklamujacego\")}","timestamp":"true","debug":"false","text":"","year":"","month":"","day":"","hour":"","minute":"","second":"","storage":"1","varName":"embed_reklama","name":"Create Embed Message"},{"storage":"1","varName":"embed_reklama","message":"Reklamowanie serwera Discord jest __zakazane__ na tym serwerze!","name":"Set Embed Description"},{"storage":"1","varName":"embed_reklama","message":"Reklamujący: ${tempVars(\"nick_reklamujacego\")}","footerIcon":"${tempVars(\"avatar_reklamujacego\")}","name":"Set Embed Footer"},{"storage":"1","varName":"embed_reklama","channel":"5","varName2":"msg_channel","storage3":"0","varName3":"","iffalse":"0","iffalseVal":"","name":"Send Embed Message"}],"comType":"1","event-type":"2","temp":"message"},{"name":"giveawayCheck","temp":"10","event-type":"3","_id":"eavvT","actions":[{"behavior":"0","interpretation":"1","code":"const fs = require('fs');\nlet giveawaysDue = [];\nvar timeNow = Math.floor(Date.now() / 1000);\nvar counter = 0;\nvar interval;\nif (globalVars(\"giveawayRan\") == null) {\n    Actions.storeValue(1, 3, \"giveawayRan\", cache);\n\n    var giveawaySysData = Actions.giveawaySystem;\n\n    for (var key in giveawaySysData) {\n        if (giveawaySysData.hasOwnProperty(key)) {\n            let giveaways = giveawaySysData[key];\n            let dueGive = giveaways.filter(({\n                finishUnix\n            }) => finishUnix <= timeNow);\n            if (dueGive.length > 0) {\n                dueGive.forEach(async f => {\n                    giveawaysDue.push(f);\n                    giveaways.splice(giveaways.findIndex(e => e.id === f.id), 1)\n                });\n\n                fs.writeFile(\"./data/giveawaySystem/giveawayData.json\", JSON.stringify(giveawaySysData), function(err) {\n                    if (err) {\n                        return console.log(err);\n                    }\n                });\n            }\n        }\n    }\n    if (giveawaysDue.length > 0) {\n        interval = setInterval(drawWinners, 2000);\n    }\n\n}\n\nasync function drawWinners() {\n    var preCount = counter;\n    var channelToFetch = client.channels.cache.get(giveawaysDue[preCount][\"channel\"]);\n    if (channelToFetch != null) {\n        channelToFetch.messages.fetch(giveawaysDue[preCount][\"giveawayMessageID\"]).then(giveawayMessage => {\n            var giveawayEmojiCache = giveawayMessage.reactions.cache.get('🎉');\n            giveawayEmojiCache.users.fetch().then(async function(giveawayUsers) {\n                if (giveawayEmojiCache.count > 100) {\n                    for (i = 0; i < giveawayEmojiCache.count; i++) {\n                        var fetchedEmojiUsers = await giveawayEmojiCache.users.fetch({\n                            after: giveawayUsers.last().id\n                        });\n                        await giveawayUsers.concat(fetchedEmojiUsers);\n                    }\n                }\n\n                giveawayUsers = giveawayUsers.array();\n                giveawayUsers = await giveawayUsers.filter(object => object.id != client.user.id);\n                var numberOfWinners = parseInt(giveawaysDue[preCount][\"winner\"]);\n                var gw = giveawayMessage.embeds[0];\n\n                gw.color = 0x000000;\n                if (gw.fields.length == 6) {\n                    gw.fields[5].value = \"Ended\"\n                }\n                gw.description = \"**Giveaway Ended**\\n\\n\" + gw.description\n\n                var winnerArray = [];\n                var winnerText = \"\";\n                if (giveawayUsers.length > 0) {\n                    if (giveawayUsers.length > numberOfWinners) {\n                        for (var i = 0; i < numberOfWinners; i++) {\n                            var randomNumber = Math.floor(Math.random() * giveawayUsers.length);\n                            winnerArray.push(`${giveawayUsers[randomNumber]}`);\n                            giveawayUsers.splice(giveawayUsers.indexOf(randomNumber), randomNumber);\n                        }\n                    } else if (giveawayUsers.length <= numberOfWinners) {\n                        for (i = 0; i < giveawayUsers.length; i++) {\n                            winnerArray.push(`${giveawayUsers[i]}`);\n                        }\n                    }\n\n                    for (i = 0; i < winnerArray.length; i++) {\n                        winnerText = winnerText + winnerArray[i] + '\\n';\n                    }\n\n                    gw.description += `\\n\\nThe winners are..\\n${winnerText}`;\n                    giveawayMessage.edit({\n                        embed: gw\n                    });\n                    channelToFetch.send(`🎉 Congratulations! 🎉 \\n ${winnerText} \\nThey have won **${giveawaysDue[preCount][\"itemGivingAway\"]}**`);\n\n                } else {\n                    gw.description += \"\\n\\nNo one entered the giveaway and thus no one won.\";\n                    giveawayMessage.edit({\n                        embed: gw\n                    });\n                    channelToFetch.send(`🎉 Giveaway Ended 🎉\\n\\nNo one entered the giveaway and thus no one won.`);\n                }\n            })\n        })\n    }\n    \n    counter += 1;\n    if (counter >= giveawaysDue.length) {\n        clearInterval(interval);\n    }\n}\n\n// VersionCheck:2","storage":"0","varName":"","name":"Run Script"},{"time":"7","measurement":"1","name":"Wait"},{"storage":"3","varName":"giveawayRan","changeType":"0","value":"null","name":"Control Variable"}],"temp2":"America/New_York"},{"name":"giveawayStart","temp":"","event-type":"1","_id":"jEKcf","actions":[{"behavior":"0","interpretation":"1","code":"if (globalVars(\"giveawayStartAlreadyRan\") == null) {\n\n    Actions.storeValue(true, 3, \"giveawayStartAlreadyRan\", cache);\n\n    const fs = require('fs');\n    const request = require('request');\n    const Files = Actions.getDBM().Files;\n    var checkUpdates = true;\n\n    if (checkUpdates) {\n        request('https://raw.githubusercontent.com/ItzPike/DBM-Rawdata-Releases/master/Giveaway%20Rewritten/versionCheck.json', function(error, response, body) {\n            if (response.statusCode == 200) {\n                var allVersions = JSON.parse(body);\n\n                var commandVersions = {};\n                var eventVersions = {};\n                var commandKeys = [];\n                var eventKeys = [];\n\n                allVersions[\"commands\"].forEach(commandVer => {\n                    commandVersions[commandVer[0]] = commandVer[1];\n                    commandKeys.push(commandVer[0]);\n                });\n\n                allVersions[\"events\"].forEach(eventVer => {\n                    eventVersions[eventVer[0]] = eventVer[1];\n                    eventKeys.push(eventVer[0])\n                })\n\n                fs.readFile(\"./data/commands.json\", async function(err, data) {\n                    var data = JSON.parse(data);\n\n                    var systemCommands = await data.filter(command => command != null && commandKeys.includes(command[\"_id\"]));\n\n                    for (i = 0; i < systemCommands.length; i++) {\n                        var systemActionFind = await systemCommands[i][\"actions\"].filter(actionInfo => actionInfo.name = \"Run Script\" && actionInfo.code != null);\n\n                        if (systemActionFind.length != 0) {\n                            var versionCheckSplit = systemActionFind[0].code.split(\"VersionCheck:\");\n                            if (versionCheckSplit[1] != null && versionCheckSplit[1] != commandVersions[systemCommands[i][\"_id\"]] && !isNaN(versionCheckSplit[versionCheckSplit.length - 1])) {\n                                console.log(`[Giveaway Rewritten] The command ${systemCommands[i][\"name\"]} needs an update!`)\n                            }\n                        }\n                    }\n                })\n\n                fs.readFile(\"./data/events.json\", async function(err, data) {\n                    var data = JSON.parse(data);\n\n                    var systemEvent = await data.filter(event => event != null && eventKeys.includes(event[\"_id\"]));\n\n                    for (i = 0; i < systemEvent.length; i++) {\n                        var systemEventFind = await systemEvent[i][\"actions\"].filter(actionInfo => actionInfo.name = \"Run Script\" && actionInfo.code != null);\n\n                        if (systemEventFind.length != 0) {\n                            var versionCheckSplit = systemEventFind[0].code.split(\"VersionCheck:\");\n                            if (versionCheckSplit != null && versionCheckSplit[versionCheckSplit.length - 1] != eventVersions[systemEvent[i][\"_id\"]] && !isNaN(versionCheckSplit[versionCheckSplit.length - 1])) {\n                                console.log(`[Giveaway Rewritten] The event ${systemEvent[i][\"name\"]} needs an update!`)\n                            }\n                        }\n                    }\n                })\n            }\n        });\n    }\n\n    if (globalVars(\"giveawaySystemMoved\") == null) {\n        Files.saveGlobalVariable(\"giveawaySystemMoved\", true);\n\n        if (!fs.existsSync(`./data/giveawaySystem`)) {\n            fs.mkdirSync(`./data/giveawaySystem`);\n        }\n\n        [\"giveawayData\"].forEach(fileName => {\n            if (fs.existsSync(`./data/${fileName}.json`)) {\n                fs.renameSync( `./data/${fileName}.json`, `./data/giveawaySystem/${fileName}.json`);\n            }\n        });\n    }\n\n    if (!fs.existsSync('./data/giveawaySystem/giveawayData.json')) {\n        fs.writeFile(\"./data/giveawaySystem/giveawayData.json\", \"{}\", function(err) {\n            if (err) {\n                return console.log(err);\n            }\n            \n            Actions.giveawaySystem = {};\n        });\n    } else {\n        fs.readFile('./data/giveawaySystem/giveawayData.json', async function read(err, data) {\n            if (err) {\n                throw err;\n            }\n\n            Actions.giveawaySystem = JSON.parse(data);\n        })\n    }\n}\n\n// VersionCheck:2","storage":"0","varName":"","name":"Run Script"}]}]